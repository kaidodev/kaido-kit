"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = __importDefault(require("mongoose"));
const mongodb_memory_server_1 = require("mongodb-memory-server");
require("chai").should();
const chai_1 = require("chai");
describe("aggregate", function () {
    describe("tx with transfers", function () {
        let Tx;
        const TxSchema = new mongoose_1.default.Schema({
            transfers: [{ from: String, usd: Number }],
            dexes: [String],
        });
        before(async function () {
            const mongod = new mongodb_memory_server_1.MongoMemoryServer();
            const uri = await mongod.getUri();
            const mongoOpts = {
                useNewUrlParser: true,
                useUnifiedTopology: true,
            };
            const connection = await mongoose_1.default.createConnection(uri, mongoOpts);
            Tx = connection.model("Tx", TxSchema);
        });
        it("should create tx without transfers", async function () {
            const tx = await Tx.create({});
            chai_1.assert.lengthOf(tx.transfers, 0);
        });
        it("should create tx with transfers", async function () {
            const tx = await Tx.create({
                transfers: [
                    { from: "a", usd: 1 },
                    { from: "b", usd: 2 },
                ],
            });
            chai_1.assert.lengthOf(tx.transfers, 2);
        });
        it("push() should add new transfers to the end", async function () {
            let tx = await Tx.create({
                transfers: [{ from: "a", usd: 1 }],
            });
            tx.transfers.push({ from: "b", usd: 2 });
            await tx.save();
            tx = await Tx.findById(tx.id);
            chai_1.assert.lengthOf(tx.transfers, 2);
            tx.transfers[0].from.should.equal("a");
            tx.transfers[1].from.should.equal("b");
        });
        it("unshift() should add new transfers to the end", async function () {
            let tx = await Tx.create({
                transfers: [{ from: "a", usd: 1 }],
            });
            tx.transfers.unshift({ from: "b", usd: 2 });
            await tx.save();
            tx = await Tx.findById(tx.id);
            chai_1.assert.lengthOf(tx.transfers, 2);
            tx.transfers[0].from.should.equal("b");
            tx.transfers[1].from.should.equal("a");
        });
        it("addToSet() should distinct primitives", async function () {
            let tx = await Tx.create({
                dexes: ["dex1"],
            });
            tx.dexes.addToSet("dex1");
            await tx.save();
            tx = await Tx.findById(tx.id);
            chai_1.assert.lengthOf(tx.dexes, 1);
        });
        it("addToSet() should not distinct objects with props", async function () {
            let tx = await Tx.create({
                transfers: [{ from: "a", usd: 1 }],
            });
            tx.transfers.addToSet({ from: "a", usd: 2 });
            tx.transfers.addToSet({ from: "a", usd: 2 });
            await tx.save();
            tx = await Tx.findById(tx.id);
            chai_1.assert.lengthOf(tx.transfers, 3);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,