"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = __importDefault(require("mongoose"));
const mongodb_memory_server_1 = require("mongodb-memory-server");
require("chai").should();
const chai_1 = require("chai");
describe("aggregate", function () {
    describe("tx with transfers", function () {
        let Tx;
        const TxSchema = new mongoose_1.default.Schema({
            transfers: [{ from: String, usd: Number }],
        });
        before(async function () {
            const mongod = new mongodb_memory_server_1.MongoMemoryServer();
            const uri = await mongod.getUri();
            const mongoOpts = {
                useNewUrlParser: true,
                useUnifiedTopology: true,
            };
            const connection = await mongoose_1.default.createConnection(uri, mongoOpts);
            Tx = connection.model("Tx", TxSchema);
        });
        it("should create tx without transfers", async function () {
            const tx = await Tx.create({});
            chai_1.assert.lengthOf(tx.transfers, 0);
        });
        it("should create tx with transfers", async function () {
            const tx = await Tx.create({
                transfers: [
                    { from: "a", usd: 1 },
                    { from: "b", usd: 2 },
                ],
            });
            chai_1.assert.lengthOf(tx.transfers, 2);
        });
        it("push() should add new transfers to the end", async function () {
            let tx = await Tx.create({
                transfers: [{ from: "a", usd: 1 }],
            });
            tx.transfers.push({ from: "b", usd: 2 });
            await tx.save();
            tx = await Tx.findById(tx.id);
            chai_1.assert.lengthOf(tx.transfers, 2);
            tx.transfers[0].from.should.equal("a");
            tx.transfers[1].from.should.equal("b");
        });
        it("unshift() should add new transfers to the end", async function () {
            let tx = await Tx.create({
                transfers: [{ from: "a", usd: 1 }],
            });
            tx.transfers.unshift({ from: "b", usd: 2 });
            await tx.save();
            tx = await Tx.findById(tx.id);
            chai_1.assert.lengthOf(tx.transfers, 2);
            tx.transfers[0].from.should.equal("b");
            tx.transfers[1].from.should.equal("a");
        });
        it("addToSet() should add new distinct transfers", async function () {
            let tx = await Tx.create({
                transfers: [{ from: "a", usd: 1 }],
            });
            tx.transfers.addToSet({ from: "a", usd: 2 });
            tx.transfers.addToSet({ from: "a", usd: 2 });
            await tx.save();
            tx = await Tx.findById(tx.id);
            chai_1.assert.lengthOf(tx.transfers, 2);
            tx.transfers[0].from.should.equal("b");
            tx.transfers[1].from.should.equal("a");
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0L2FnZ3JlZ2F0ZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0Esd0RBQWdDO0FBQ2hDLGlFQUEwRDtBQUUxRCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDekIsK0JBQThCO0FBSzlCLFFBQVEsQ0FBQyxXQUFXLEVBQUU7SUFDcEIsUUFBUSxDQUFDLG1CQUFtQixFQUFFO1FBQzVCLElBQUksRUFBTyxDQUFDO1FBQ1osTUFBTSxRQUFRLEdBQUcsSUFBSSxrQkFBUSxDQUFDLE1BQU0sQ0FBQztZQUNuQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDO1NBQzNDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxLQUFLO1lBQ1YsTUFBTSxNQUFNLEdBQUcsSUFBSSx5Q0FBaUIsRUFBRSxDQUFDO1lBRXZDLE1BQU0sR0FBRyxHQUFHLE1BQU0sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2xDLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixlQUFlLEVBQUUsSUFBSTtnQkFDckIsa0JBQWtCLEVBQUUsSUFBSTthQUd6QixDQUFDO1lBRUYsTUFBTSxVQUFVLEdBQUcsTUFBTSxrQkFBUSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUNuRSxFQUFFLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsb0NBQW9DLEVBQUUsS0FBSztZQUM1QyxNQUFNLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFL0IsYUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxF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LENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0MsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2hCLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlCLGFBQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNqQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbnNvbGEgZnJvbSBcImNvbnNvbGFcIjtcbmltcG9ydCBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCB7IE1vbmdvTWVtb3J5U2VydmVyIH0gZnJvbSBcIm1vbmdvZGItbWVtb3J5LXNlcnZlclwiO1xuXG5yZXF1aXJlKFwiY2hhaVwiKS5zaG91bGQoKTtcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCJjaGFpXCI7XG4vLyBjb25zb2xhLmluZm8oYXNzZXJ0KTtcblxuaW1wb3J0IHsgQSB9IGZyb20gXCIuLi9zcmNcIjtcblxuZGVzY3JpYmUoXCJhZ2dyZWdhdGVcIiwgZnVuY3Rpb24gKCkge1xuICBkZXNjcmliZShcInR4IHdpdGggdHJhbnNmZXJzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgVHg6IGFueTtcbiAgICBjb25zdCBUeFNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xuICAgICAgdHJhbnNmZXJzOiBbeyBmcm9tOiBTdHJpbmcsIHVzZDogTnVtYmVyIH1dLFxuICAgIH0pO1xuXG4gICAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IG1vbmdvZCA9IG5ldyBNb25nb01lbW9yeVNlcnZlcigpO1xuXG4gICAgICBjb25zdCB1cmkgPSBhd2FpdCBtb25nb2QuZ2V0VXJpKCk7XG4gICAgICBjb25zdCBtb25nb09wdHMgPSB7XG4gICAgICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcbiAgICAgICAgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLFxuICAgICAgICAvLyB1c2VGaW5kQW5kTW9kaWZ5OiBmYWxzZSxcbiAgICAgICAgLy8gdXNlQ3JlYXRlSW5kZXg6IHRydWUsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgbW9uZ29vc2UuY3JlYXRlQ29ubmVjdGlvbih1cmksIG1vbmdvT3B0cyk7XG4gICAgICBUeCA9IGNvbm5lY3Rpb24ubW9kZWwoXCJUeFwiLCBUeFNjaGVtYSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBjcmVhdGUgdHggd2l0aG91dCB0cmFuc2ZlcnNcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgdHggPSBhd2FpdCBUeC5jcmVhdGUoe30pO1xuXG4gICAgICBhc3NlcnQubGVuZ3RoT2YodHgudHJhbnNmZXJzLCAwKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGNyZWF0ZSB0eCB3aXRoIHRyYW5zZmVyc1wiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCB0eCA9IGF3YWl0IFR4LmNyZWF0ZSh7XG4gICAgICAgIHRyYW5zZmVyczogW1xuICAgICAgICAgIHsgZnJvbTogXCJhXCIsIHVzZDogMSB9LFxuICAgICAgICAgIHsgZnJvbTogXCJiXCIsIHVzZDogMiB9LFxuICAgICAgICBdLFxuICAgICAgfSk7XG5cbiAgICAgIGFzc2VydC5sZW5ndGhPZih0eC50cmFuc2ZlcnMsIDIpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJwdXNoKCkgc2hvdWxkIGFkZCBuZXcgdHJhbnNmZXJzIHRvIHRoZSBlbmRcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHR4ID0gYXdhaXQgVHguY3JlYXRlKHtcbiAgICAgICAgdHJhbnNmZXJzOiBbeyBmcm9tOiBcImFcIiwgdXNkOiAxIH1dLFxuICAgICAgfSk7XG5cbiAgICAgIHR4LnRyYW5zZmVycy5wdXNoKHsgZnJvbTogXCJiXCIsIHVzZDogMiB9KTtcbiAgICAgIGF3YWl0IHR4LnNhdmUoKTtcbiAgICAgIHR4ID0gYXdhaXQgVHguZmluZEJ5SWQodHguaWQpO1xuICAgICAgYXNzZXJ0Lmxlbmd0aE9mKHR4LnRyYW5zZmVycywgMik7XG4gICAgICB0eC50cmFuc2ZlcnNbMF0uZnJvbS5zaG91bGQuZXF1YWwoXCJhXCIpO1xuICAgICAgdHgudHJhbnNmZXJzWzFdLmZyb20uc2hvdWxkLmVxdWFsKFwiYlwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwidW5zaGlmdCgpIHNob3VsZCBhZGQgbmV3IHRyYW5zZmVycyB0byB0aGUgZW5kXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCB0eCA9IGF3YWl0IFR4LmNyZWF0ZSh7XG4gICAgICAgIHRyYW5zZmVyczogW3sgZnJvbTogXCJhXCIsIHVzZDogMSB9XSxcbiAgICAgIH0pO1xuXG4gICAgICB0eC50cmFuc2ZlcnMudW5zaGlmdCh7IGZyb206IFwiYlwiLCB1c2Q6IDIgfSk7XG4gICAgICBhd2FpdCB0eC5zYXZlKCk7XG4gICAgICB0eCA9IGF3YWl0IFR4LmZpbmRCeUlkKHR4LmlkKTtcbiAgICAgIGFzc2VydC5sZW5ndGhPZih0eC50cmFuc2ZlcnMsIDIpO1xuICAgICAgdHgudHJhbnNmZXJzWzBdLmZyb20uc2hvdWxkLmVxdWFsKFwiYlwiKTtcbiAgICAgIHR4LnRyYW5zZmVyc1sxXS5mcm9tLnNob3VsZC5lcXVhbChcImFcIik7XG4gICAgfSk7XG5cbiAgICBpdChcImFkZFRvU2V0KCkgc2hvdWxkIGFkZCBuZXcgZGlzdGluY3QgdHJhbnNmZXJzXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCB0eCA9IGF3YWl0IFR4LmNyZWF0ZSh7XG4gICAgICAgIHRyYW5zZmVyczogW3sgZnJvbTogXCJhXCIsIHVzZDogMSB9XSxcbiAgICAgIH0pO1xuXG4gICAgICB0eC50cmFuc2ZlcnMuYWRkVG9TZXQoeyBmcm9tOiBcImFcIiwgdXNkOiAyIH0pO1xuICAgICAgdHgudHJhbnNmZXJzLmFkZFRvU2V0KHsgZnJvbTogXCJhXCIsIHVzZDogMiB9KTtcbiAgICAgIGF3YWl0IHR4LnNhdmUoKTtcbiAgICAgIHR4ID0gYXdhaXQgVHguZmluZEJ5SWQodHguaWQpO1xuICAgICAgYXNzZXJ0Lmxlbmd0aE9mKHR4LnRyYW5zZmVycywgMik7XG4gICAgICB0eC50cmFuc2ZlcnNbMF0uZnJvbS5zaG91bGQuZXF1YWwoXCJiXCIpO1xuICAgICAgdHgudHJhbnNmZXJzWzFdLmZyb20uc2hvdWxkLmVxdWFsKFwiYVwiKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==