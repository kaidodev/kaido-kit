"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const consola_1 = __importDefault(require("consola"));
require("chai").should();
const brain_js_1 = __importDefault(require("brain.js"));
it("should approximate XOR", function () {
    const config = {
        binaryThresh: 0.5,
        hiddenLayers: [3],
        activation: "sigmoid",
        leakyReluAlpha: 0.01,
    };
    const net = new brain_js_1.default.NeuralNetwork(config);
    net.train([
        { input: [0, 0], output: [0] },
        { input: [0, 1], output: [1] },
        { input: [1, 0], output: [1] },
        { input: [1, 1], output: [0] },
    ]);
    const output = net.run([1, 0]);
    consola_1.default.info(output);
    Math.abs(1 - output[0]).should.lte(0.07);
});
it.skip("with optional config", function () {
    const config = {
        inputSize: 20,
        inputRange: 20,
        hiddenLayers: [20, 20],
        outputSize: 20,
        learningRate: 0.01,
        decayRate: 0.999,
    };
    const net = new brain_js_1.default.recurrent.RNN(config);
    net.train([
        { input: [0, 0], output: [0] },
        { input: [0, 1], output: [1] },
        { input: [1, 0], output: [1] },
        { input: [1, 1], output: [0] },
    ], config);
    let output = net.run([0, 0]);
    consola_1.default.info(output);
    output = net.run([0, 1]);
    output = net.run([1, 0]);
    output = net.run([1, 1]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC9leGFtcGxlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzREFBOEI7QUFFOUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBSXpCLHdEQUE2QjtBQUU3QixFQUFFLENBQUMsd0JBQXdCLEVBQUU7SUFFM0IsTUFBTSxNQUFNLEdBQVE7UUFDbEIsWUFBWSxFQUFFLEdBQUc7UUFDakIsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLFVBQVUsRUFBRSxTQUFTO1FBQ3JCLGNBQWMsRUFBRSxJQUFJO0tBQ3JCLENBQUM7SUFDRixNQUFNLEdBQUcsR0FBRyxJQUFJLGtCQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDUixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUM5QixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUM5QixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUM5QixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtLQUMvQixDQUFDLENBQUM7SUFDSCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0IsaUJBQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUMsQ0FBQztBQUVILEVBQUUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7SUFFOUIsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsRUFBRTtRQUNiLFVBQVUsRUFBRSxFQUFFO1FBQ2QsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUN0QixVQUFVLEVBQUUsRUFBRTtRQUNkLFlBQVksRUFBRSxJQUFJO1FBQ2xCLFNBQVMsRUFBRSxLQUFLO0tBQ2pCLENBQUM7SUFHRixNQUFNLEdBQUcsR0FBRyxJQUFJLGtCQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1QyxHQUFHLENBQUMsS0FBSyxDQUNQO1FBQ0UsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDOUIsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDOUIsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDOUIsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7S0FDL0IsRUFDRCxNQUFNLENBQ1AsQ0FBQztJQUVGLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QixpQkFBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQixNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25zb2xhIGZyb20gXCJjb25zb2xhXCI7XG5cbnJlcXVpcmUoXCJjaGFpXCIpLnNob3VsZCgpO1xuXG5pbXBvcnQgeyBBIH0gZnJvbSBcIi4uL3NyY1wiO1xuXG5pbXBvcnQgYnJhaW4gZnJvbSBcImJyYWluLmpzXCI7XG5cbml0KFwic2hvdWxkIGFwcHJveGltYXRlIFhPUlwiLCBmdW5jdGlvbiAoKSB7XG4gIC8vIHByb3ZpZGUgb3B0aW9uYWwgY29uZmlnIG9iamVjdCAob3IgdW5kZWZpbmVkKS4gRGVmYXVsdHMgc2hvd24uXG4gIGNvbnN0IGNvbmZpZzogYW55ID0ge1xuICAgIGJpbmFyeVRocmVzaDogMC41LFxuICAgIGhpZGRlbkxheWVyczogWzNdLCAvLyBhcnJheSBvZiBpbnRzIGZvciB0aGUgc2l6ZXMgb2YgdGhlIGhpZGRlbiBsYXllcnMgaW4gdGhlIG5ldHdvcmtcbiAgICBhY3RpdmF0aW9uOiBcInNpZ21vaWRcIiwgLy8gc3VwcG9ydGVkIGFjdGl2YXRpb24gdHlwZXM6IFsnc2lnbW9pZCcsICdyZWx1JywgJ2xlYWt5LXJlbHUnLCAndGFuaCddLFxuICAgIGxlYWt5UmVsdUFscGhhOiAwLjAxLCAvLyBzdXBwb3J0ZWQgZm9yIGFjdGl2YXRpb24gdHlwZSAnbGVha3ktcmVsdSdcbiAgfTtcbiAgY29uc3QgbmV0ID0gbmV3IGJyYWluLk5ldXJhbE5ldHdvcmsoY29uZmlnKTtcbiAgbmV0LnRyYWluKFtcbiAgICB7IGlucHV0OiBbMCwgMF0sIG91dHB1dDogWzBdIH0sXG4gICAgeyBpbnB1dDogWzAsIDFdLCBvdXRwdXQ6IFsxXSB9LFxuICAgIHsgaW5wdXQ6IFsxLCAwXSwgb3V0cHV0OiBbMV0gfSxcbiAgICB7IGlucHV0OiBbMSwgMV0sIG91dHB1dDogWzBdIH0sXG4gIF0pO1xuICBjb25zdCBvdXRwdXQgPSBuZXQucnVuKFsxLCAwXSk7XG4gIGNvbnNvbGEuaW5mbyhvdXRwdXQpO1xuICBNYXRoLmFicygxIC0gb3V0cHV0WzBdKS5zaG91bGQubHRlKDAuMDcpO1xufSk7XG5cbml0LnNraXAoXCJ3aXRoIG9wdGlvbmFsIGNvbmZpZ1wiLCBmdW5jdGlvbiAoKSB7XG4gIC8vIHByb3ZpZGUgb3B0aW9uYWwgY29uZmlnIG9iamVjdCwgZGVmYXVsdHMgc2hvd24uXG4gIGNvbnN0IGNvbmZpZyA9IHtcbiAgICBpbnB1dFNpemU6IDIwLFxuICAgIGlucHV0UmFuZ2U6IDIwLFxuICAgIGhpZGRlbkxheWVyczogWzIwLCAyMF0sXG4gICAgb3V0cHV0U2l6ZTogMjAsXG4gICAgbGVhcm5pbmdSYXRlOiAwLjAxLFxuICAgIGRlY2F5UmF0ZTogMC45OTksXG4gIH07XG5cbiAgLy8gY3JlYXRlIGEgc2ltcGxlIHJlY3VycmVudCBuZXVyYWwgbmV0d29ya1xuICBjb25zdCBuZXQgPSBuZXcgYnJhaW4ucmVjdXJyZW50LlJOTihjb25maWcpO1xuXG4gIG5ldC50cmFpbihcbiAgICBbXG4gICAgICB7IGlucHV0OiBbMCwgMF0sIG91dHB1dDogWzBdIH0sXG4gICAgICB7IGlucHV0OiBbMCwgMV0sIG91dHB1dDogWzFdIH0sXG4gICAgICB7IGlucHV0OiBbMSwgMF0sIG91dHB1dDogWzFdIH0sXG4gICAgICB7IGlucHV0OiBbMSwgMV0sIG91dHB1dDogWzBdIH0sXG4gICAgXSxcbiAgICBjb25maWdcbiAgKTtcblxuICBsZXQgb3V0cHV0ID0gbmV0LnJ1bihbMCwgMF0pOyAvLyBbMF1cbiAgY29uc29sYS5pbmZvKG91dHB1dCk7XG4gIG91dHB1dCA9IG5ldC5ydW4oWzAsIDFdKTsgLy8gWzFdXG4gIG91dHB1dCA9IG5ldC5ydW4oWzEsIDBdKTsgLy8gWzFdXG4gIG91dHB1dCA9IG5ldC5ydW4oWzEsIDFdKTsgLy8gWzBdXG59KTtcbiJdfQ==